8051 Assembler           Version 1.00   06/29/123 22:28:21    Page 1
C:\Users\borna\OneDrive\Documents\uni-borna\computer structure\project\codes\MPF - Copy.a51



    1 0000              ;====================================================================
    2 0000              ; DEFINITIONS
    3 0000              ;====================================================================
    4 0000              ; addresses
    5 0000              ;====================================================================
    6 0000              ; in coding mode
    7 0000              ; P0 is the State of the FSM
    8 0000              ; P1 is the Input
    9 0000              ; P2 is the input data
   10 0000              ; P3 is the input address
   11 0000              ;====================================================================
   12 0000              ; in execution mode
   13 0000              ; P6 is the beggining address
   14 0000              ; R1 is the PC
   15 0000              ; R3 is the stack
   16 0000              ; R4 is the IR
   17 0000              ;====================================================================
   18 0000              ; 00H to 0FH are numeric inputs
   19 0000              ORG_KEY EQU 010H
   20 0000              ADR_PLUS EQU 011H
   21 0000              ADR_MINUS EQU 012H
   22 0000              EXECUTE EQU 013H
   23 0000              END_KEY EQU 014H
   24 0000              NO_KEY EQU 0FFH
   25 0000              ; instructions starting from C0H
   26 0000              F1 EQU 0C0H
   27 0000              F2 EQU 0C1H
   28 0000              F3 EQU 0C2H
   29 0000              F4 EQU 0C3H
   30 0000              F5 EQU 0C4H
   31 0000              F6 EQU 0C5H
   32 0000              F7 EQU 0C6H
   33 0000              F8 EQU 0C7H
   34 0000              ; flags
   35 0000              NUMBER_INPUT_FLAG EQU F0
   36 0000              EXE_FLAG EQU F1
   37 0000              END_FLAG EQU F2
   38 0000              WRONG_FLAG EQU F3
   39 0000              ;====================================================================
   40 0000              ; VARIABLES
   41 0000              ;====================================================================
   42 0CFF              ORG 0CFFH
   43 0CFF              KEY_MAP:
   44 0CFF 00 01 02         DB 000H, 001H, 002H, 003H, ORG_KEY, EXECUTE, ADR_PLUS, ADR_MINUS
      0D02 03 10 13
      0D05 11 12
   45 0D07 04 05 06         DB 004H, 005H, 006H, 007H, END_KEY, NO_KEY, NO_KEY, NO_KEY
      0D0A 07 14 FF
      0D0D FF FF
   46 0D0F 08 09 0A         DB 008H, 009H, 00AH, 00BH, F1, F2, F3, F4
      0D12 0B C0 C1
      0D15 C2 C3
   47 0D17 0C 0D 0E         DB 00CH, 00DH, 00EH, 00FH, F5, F6, F7, F8
      0D1A 0F C4 C5
      0D1D C6 C7
   48 0D1F              
   49 0D1F              
8051 Assembler           Version 1.00   06/29/123 22:28:21    Page 2
C:\Users\borna\OneDrive\Documents\uni-borna\computer structure\project\codes\MPF - Copy.a51



   50 0000              ORG 0000H
   51 0000 020665           JMP MAIN
   52 0003              
   53 0003              ; ISR
   54 0003              ORG 0003H
   55 0003 C2B1             CLR P3.1                    ; Disable interrupt
   56 0005 C2AF             CLR EA                      ; No interrupt will be acknowledged
   57 0007 C2A8             CLR EX0                     ; Disable external interrupt0
   58 0009 91FF             ACALL KEY_INPUT             ; updates R1
   59 000B B148             ACALL UPDATE_STATE_FLAGS    ; update R0 which is the state of the FSM, also save input data
   60 000D                  ; visualization
   61 000D D162             ACALL SHOW_ON_SEGMENT
   62 000F                  ; check if we should execute
   63 000F 30C002           JNB EXE_FLAG, ISR_NON_EXE
   64 0012 D198             ACALL RUN_EXE
   65 0014                  ISR_NON_EXE:
   66 0014                  ; check if wrong key was pressed
   67 0014 30C202           JNB WRONG_FLAG, ISR_NON_WRONG
   68 0017 D18A             ACALL WRONG_PRESS
   69 0019                  ISR_NON_WRONG:
   70 0019                  ; check if code should be run
   71 0019 30C103           JNB END_FLAG, ISR_NON_END
   72 001C 0206A5           JMP RUN_CODE ; go to execution
   73 001F                  ISR_NON_END:
   74 001F                  ; reset and return from interrupt
   75 001F D2AF             SETB EA             ; Enable interrupt individually
   76 0021 D2A8             SETB EX0            ; Enable external interrupt0
   77 0023 D2B1             SETB P3.1           ; Enable interrupt
   78 0025 32               RETI                ; Return from interrupt
   79 0026              
   80 04FF              ORG 04FFH
   81 04FF              
   82 04FF              KEY_INPUT:
   83 04FF B10C             ACALL GET_COL
   84 0501 B119             ACALL GET_ROW 
   85 0503 B13E             ACALL COL_ROW_TO_KEY ; save corresponding key value to R1 register
   86 0505 758000           MOV P0, #000H
   87 0508 75A0FF           MOV P2, #0FFH
   88 050B 22               RET
   89 050C              
   90 050C              GET_COL:
   91 050C E5A0             MOV A, P2
   92 050E 7C00             MOV R4, #000H
   93 0510                  FIND_INDEX_LOOP:
   94 0510 30E005               JNB ACC.0, INDEX_FOUND  ; Jump if the lowest bit of A is set
   95 0513 0C                   INC R4  ; Increment the index counter
   96 0514 13                   RRC A  ; Rotate A right through carry
   97 0515 020510               JMP FIND_INDEX_LOOP
   98 0518                  INDEX_FOUND:
   99 0518 22                   RET
  100 0519              GET_ROW:
  101 0519                  ROW1:
  102 0519 B280                 CPL P0.0
  103 051B E5A0                 MOV A, P2
  104 051D B4FF03               CJNE A, #0FFH, ROW2
  105 0520 7D00                 MOV R5, #000H
  106 0522 22                   RET
8051 Assembler           Version 1.00   06/29/123 22:28:21    Page 3
C:\Users\borna\OneDrive\Documents\uni-borna\computer structure\project\codes\MPF - Copy.a51



  107 0523                  ROW2:
  108 0523 B280                 CPL P0.0
  109 0525 B281                 CPL P0.1
  110 0527 E5A0                 MOV A, P2
  111 0529 B4FF03               CJNE A, #0FFH, ROW3
  112 052C 7D01                 MOV R5, #001H
  113 052E 22                   RET
  114 052F                  ROW3:
  115 052F B281                 CPL P0.1
  116 0531 B282                 CPL P0.2
  117 0533 E5A0                 MOV A, P2
  118 0535 B4FF03               CJNE A, #0FFH, ROW4
  119 0538 7D02                 MOV R5, #002H
  120 053A 22                   RET
  121 053B                  ROW4:
  122 053B 7D03                 MOV R5, #003H
  123 053D 22                   RET
  124 053E              COL_ROW_TO_KEY:
  125 053E ED               MOV A, R5
  126 053F C4               SWAP A
  127 0540 03               RR A
  128 0541 4C               ORL A, R4
  129 0542 900CFF           MOV DPTR, #KEY_MAP
  130 0545 93               MOVC A, @A+DPTR  ; Fetch value from the lookup table
  131 0546 F9               MOV R1, A
  132 0547 22               RET
  133 0548              
  134 0548              
  135 0548              UPDATE_STATE_FLAGS:
  136 0548                  ; check if input was a special function, should not change accumulator value
  137 0548 F5FF             MOV 0FFH, A
  138 054A E9               MOV A, R1
  139 054B 54F0             ANL A, #0F0H
  140 054D B4C005           CJNE A, #0C0H, NON_SPECIAL_FUNCTION
  141 0550 E5FF             MOV A, 0FFH
  142 0552 D12E             ACALL FUNCTION_CALL
  143 0554 22               RET
  144 0555                  NON_SPECIAL_FUNCTION:
  145 0555                  ; check if input is numeric
  146 0555 E9               MOV A, R1
  147 0556 54F0             ANL A, #0F0H
  148 0558 C2D5             CLR NUMBER_INPUT_FLAG
  149 055A B40002           CJNE A, #0H, NON_NUMERIC
  150 055D D2D5             SETB NUMBER_INPUT_FLAG
  151 055F                  NON_NUMERIC:
  152 055F C2C0             CLR EXE_FLAG    ; will be set in cases
  153 0561 C2C2             CLR WRONG_FLAG  ; will be set in cases
  154 0563 C2C1             CLR END_FLAG
  155 0565                  ; check if input was END
  156 0565 B91409           CJNE R1, #END_KEY, GENERAL_KEY
  157 0568 D2C1             SETB END_FLAG
  158 056A 7800             MOV R0, #000H   ; reset state
  159 056C 7A00             MOV R2, #000H   ; reset address register
  160 056E 7B00             MOV R3, #000H   ; reset data register
  161 0570 22               RET
  162 0571                  ; Perform the switch-case
  163 0571                  GENERAL_KEY:
8051 Assembler           Version 1.00   06/29/123 22:28:21    Page 4
C:\Users\borna\OneDrive\Documents\uni-borna\computer structure\project\codes\MPF - Copy.a51



  164 0571 B8000B               CASE_0: CJNE R0, #00H , CASE_1
  165 0574                          ORG_CLICK_0:
  166 0574 B91005                       CJNE R1, #ORG_KEY, WRONG_KEY_0
  167 0577 7801                         MOV R0, #001H    ; update state
  168 0579 02061D                       JMP DEFAULT_CASE
  169 057C                          WRONG_KEY_0:
  170 057C 02061B                       JMP WRONG_KEY
  171 057F B8010D               CASE_1: CJNE R0, #01H , CASE_2
  172 0582                          NUMBER_KEY_1:
  173 0582 30D507                       JNB NUMBER_INPUT_FLAG, NON_NUMBER_KEY_1
  174 0585 7802                         MOV R0, #002H
  175 0587 D120                         ACALL UPDATE_ADDRESS_INPUT
  176 0589 02061D                       JMP DEFAULT_CASE
  177 058C                          NON_NUMBER_KEY_1:
  178 058C 02061B                       JMP WRONG_KEY
  179 058F B8020D               CASE_2: CJNE R0, #02H , CASE_3
  180 0592                          NUMBER_KEY_2:
  181 0592 30D507                       JNB NUMBER_INPUT_FLAG, NON_NUMBER_KEY_2
  182 0595 7803                         MOV R0, #003H
  183 0597 D120                         ACALL UPDATE_ADDRESS_INPUT
  184 0599 02061D                       JMP DEFAULT_CASE
  185 059C                          NON_NUMBER_KEY_2:
  186 059C 02061B                       JMP WRONG_KEY
  187 059F B80317               CASE_3: CJNE R0, #03H , CASE_4
  188 05A2                          EXE_CLICK_3:
  189 05A2 B91309                       CJNE R1, #EXECUTE, WRONG_KEY_3
  190 05A5 7804                         MOV R0, #004H
  191 05A7                              ; beginning value of PC
  192 05A7 EB                           MOV A , R3
  193 05A8 FE                           MOV R6, A
  194 05A9 D2C0                         SETB EXE_FLAG 
  195 05AB 02061D                       JMP DEFAULT_CASE
  196 05AE                          WRONG_KEY_3:
  197 05AE                              NUMBER_KEY_3: 
  198 05AE 30D505                           JNB NUMBER_INPUT_FLAG, NON_NUMBER_KEY_3
  199 05B1 D120                             ACALL UPDATE_ADDRESS_INPUT
  200 05B3 02061D                           JMP DEFAULT_CASE
  201 05B6                              NON_NUMBER_KEY_3:
  202 05B6 02061B                           JMP WRONG_KEY
  203 05B9 B8040D               CASE_4: CJNE R0, #04H , CASE_5
  204 05BC                          NUMBER_KEY_4:
  205 05BC 30D507                       JNB NUMBER_INPUT_FLAG, NON_NUMBER_KEY_4
  206 05BF 7805                         MOV R0, #005H
  207 05C1 D127                         ACALL UPDATE_DATA_INPUT
  208 05C3 02061D                       JMP DEFAULT_CASE
  209 05C6                          NON_NUMBER_KEY_4:
  210 05C6 02061B                       JMP WRONG_KEY
  211 05C9 B8050D               CASE_5: CJNE R0, #05H , CASE_6
  212 05CC                          NUMBER_KEY_5:
  213 05CC 30D5F7                       JNB NUMBER_INPUT_FLAG, NON_NUMBER_KEY_4
  214 05CF 7806                         MOV R0, #006H
  215 05D1 D127                         ACALL UPDATE_DATA_INPUT
  216 05D3 02061D                       JMP DEFAULT_CASE
  217 05D6                          NON_NUMBER_KEY_5:
  218 05D6 02061B                       JMP WRONG_KEY
  219 05D9 B80615               CASE_6: CJNE R0, #06H , CASE_7
  220 05DC                          EXE_CLICK_6:
8051 Assembler           Version 1.00   06/29/123 22:28:21    Page 5
C:\Users\borna\OneDrive\Documents\uni-borna\computer structure\project\codes\MPF - Copy.a51



  221 05DC B91307                       CJNE R1, #EXECUTE, WRONG_KEY_6
  222 05DF 7807                         MOV R0, #007H
  223 05E1 D2C0                         SETB EXE_FLAG
  224 05E3 02061D                       JMP DEFAULT_CASE
  225 05E6                          WRONG_KEY_6:
  226 05E6                              NUMBER_KEY_6: 
  227 05E6 30D505                           JNB NUMBER_INPUT_FLAG, NON_NUMBER_KEY_6
  228 05E9 D127                             ACALL UPDATE_DATA_INPUT
  229 05EB 02061D                           JMP DEFAULT_CASE
  230 05EE                              NON_NUMBER_KEY_6:
  231 05EE 02061B                           JMP WRONG_KEY
  232 05F1 B80729               CASE_7: CJNE R0, #07H , DEFAULT_CASE
  233 05F4                          ORG_CLICK_7:
  234 05F4 B91007                       CJNE R1, #ORG_KEY, ADR_PLUS_CLICK_7
  235 05F7 7801                         MOV R0, #001H
  236 05F9 7A00                         MOV R2, #000H ; reset data register
  237 05FB 02061D                       JMP DEFAULT_CASE
  238 05FE                          ADR_PLUS_CLICK_7:
  239 05FE B9110A                       CJNE R1, #ADR_PLUS, ADR_MINUS_CLICK_7
  240 0601 7804                         MOV R0, #004H
  241 0603 7A00                         MOV R2, #000H ; reset data register
  242 0605 EB                           MOV A, R3
  243 0606 04                           INC A
  244 0607 FB                           MOV R3, A
  245 0608 02061D                       JMP DEFAULT_CASE
  246 060B                          ADR_MINUS_CLICK_7:
  247 060B B9120A                       CJNE R1, #ADR_MINUS, WRONG_KEY_7
  248 060E 7804                         MOV R0, #004H
  249 0610 7A00                         MOV R2, #000H ; reset data register
  250 0612 EB                           MOV A, R3
  251 0613 14                           DEC A
  252 0614 FB                           MOV R3, A
  253 0615 02061D                       JMP DEFAULT_CASE
  254 0618                          WRONG_KEY_7:
  255 0618 02061B                       JMP WRONG_KEY
  256 061B                  WRONG_KEY:
  257 061B D2C2                 SETB WRONG_FLAG
  258 061D                  DEFAULT_CASE:
  259 061D D158                 ACALL SET_DATA_ON_SEGMENT
  260 061F 22                   RET
  261 0620              
  262 0620              UPDATE_ADDRESS_INPUT:
  263 0620 EB               MOV A, R3 ; load current input address
  264 0621 C4               SWAP A
  265 0622 54F0             ANL A, #0F0H
  266 0624 49               ORL A, R1 
  267 0625 FB               MOV R3, A
  268 0626 22               RET
  269 0627              
  270 0627              UPDATE_DATA_INPUT:
  271 0627 EA               MOV A, R2 ; load current input data
  272 0628 C4               SWAP A
  273 0629 54F0             ANL A, #0F0H
  274 062B 49               ORL A, R1 
  275 062C FA               MOV R2, A
  276 062D 22               RET
  277 062E              
8051 Assembler           Version 1.00   06/29/123 22:28:21    Page 6
C:\Users\borna\OneDrive\Documents\uni-borna\computer structure\project\codes\MPF - Copy.a51



  278 062E              FUNCTION_CALL:
  279 062E B9C001           F1_CALL: CJNE R1, #F1, F2_CALL
  280 0631 22               RET ; do nothing, it should show the accumilator
  281 0632 B9C102           F2_CALL: CJNE R1, #F2, F3_CALL
  282 0635 E8               MOV A, R0 ; show current state
  283 0636 22               RET
  284 0637 B9C202           F3_CALL: CJNE R1, #F3, F4_CALL
  285 063A EB               MOV A, R3 ; show current adress
  286 063B 22               RET
  287 063C B9C302           F4_CALL: CJNE R1, #F4, F5_CALL
  288 063F EA               MOV A, R2 ; show current data
  289 0640 22               RET
  290 0641 B9C402           F5_CALL: CJNE R1, #F5, F6_CALL
  291 0644 EE               MOV A, R6 ; show code start
  292 0645 22               RET
  293 0646 B9C503           F6_CALL: CJNE R1, #F6, F7_CALL
  294 0649 E5F0             MOV A, B ; show B register
  295 064B 22               RET
  296 064C B9C603           F7_CALL: CJNE R1, #F7, F8_CALL
  297 064F E5CF             MOV A, 0CFH ; show data in specific part of memory
  298 0651 22               RET
  299 0652 B9C700           F8_CALL: CJNE R1, #F8, DEFAULT_CALL
  300 0655                  DEFAULT_CALL:
  301 0655 D158             ACALL SET_DATA_ON_SEGMENT
  302 0657 22               RET
  303 0658              
  304 0658              SET_DATA_ON_SEGMENT:
  305 0658 E8               MOV A , R0
  306 0659 54FC             ANL A, #11111100B
  307 065B B40002           CJNE A, #0H , SHOW_R2_ON_SEGMENT
  308 065E EB               MOV A, R3
  309 065F 22               RET
  310 0660                  SHOW_R2_ON_SEGMENT:
  311 0660 EA               MOV A, R2
  312 0661 22               RET
  313 0662              
  314 0662              SHOW_ON_SEGMENT: ; current implementation is very basic
  315 0662 F590             MOV P1, A
  316 0664 22               RET
  317 0665              
  318 0665              MAIN:
  319 0665 D16A             ACALL INIT
  320 0667              LOOP:
  321 0667 020667           JMP LOOP
  322 066A              
  323 066A              INIT:
  324 066A 758000           MOV P0, #000H   ; define P0 as output
  325 066D 75A0FF           MOV P2, #0FFH   ; define P2 as input
  326 0670 759000           MOV P1, #000H   ; define P1 as output
  327 0673 D288             SETB IT0        ; Falling edge interrupt
  328 0675 C2AA             CLR EX1         ; Disable external interrupt 1
  329 0677 7800             MOV R0, #000H   ; initialize R0 which is the state register
  330 0679 7900             MOV R1, #000H   ; initialize R1 which is the input register
  331 067B 7A00             MOV R2, #000H   ; initialize R2 which is the current data 
  332 067D 7B00             MOV R3, #000H   ; initialize R3 which is the current address
  333 067F C2D5             CLR NUMBER_INPUT_FLAG 
  334 0681 C2C1             CLR END_FLAG
8051 Assembler           Version 1.00   06/29/123 22:28:21    Page 7
C:\Users\borna\OneDrive\Documents\uni-borna\computer structure\project\codes\MPF - Copy.a51



  335 0683 C2C0             CLR EXE_FLAG
  336 0685 D2AF             SETB EA         ; Enable interrupt individually
  337 0687 D2A8             SETB EX0        ; Enable external interrupt0
  338 0689 22               RET
  339 068A              
  340 068A              WRONG_PRESS: ; make the segments blink
  341 068A 8580F0           MOV B, P0
  342 068D 7488             MOV A, #88H
  343 068F D162             ACALL SHOW_ON_SEGMENT
  344 0691 D1E0             ACALL DELAY
  345 0693 E580             MOV A, P0
  346 0695 D162             ACALL SHOW_ON_SEGMENT
  347 0697 22               RET
  348 0698                  
  349 0698              RUN_EXE:
  350 0698 B80401           CJNE R0, #004H, UPDATE_MEMORY
  351 069B 22               RET ; address is already saved in R3, no need for change
  352 069C                  UPDATE_MEMORY:
  353 069C 88F0             MOV B, R0 ; temporary memory
  354 069E EB               MOV A, R3
  355 069F F8               MOV R0, A
  356 06A0 EA               MOV A, R2
  357 06A1 F6               MOV @R0, A
  358 06A2 A8F0             MOV R0, B
  359 06A4 22               RET
  360 06A5              
  361 06A5              RUN_CODE:
  362 06A5                  INIT_RUN:
  363 06A5 EE               MOV A , R6
  364 06A6 F9               MOV R1, A       ; PC
  365 06A7                  ; we do not use a MAR since using basic asm we can implement its functionality
  366 06A7 7C00             MOV R4, #00H    ; IR
  367 06A9 7B00             MOV R3, #00H    ; STACK
  368 06AB                  FETCH:
  369 06AB F5FF             MOV 0FFH, A
  370 06AD E7               MOV A, @R1
  371 06AE FC               MOV R4, A ; IR <- @PC
  372 06AF E5FF             MOV A, 0FFH
  373 06B1 D1B6             ACALL DECODE_AND_EXECUTE
  374 06B3 0206AB           JMP FETCH ; will not exit, need to use RST, or write new code
  375 06B6                  
  376 06B6              DECODE_AND_EXECUTE:
  377 06B6 BC0006           NOP_MNEMONIC: CJNE R4, #000H, INC_A_MNEMONIC
  378 06B9                      EXECUTE_END: 
  379 06B9 D162                     ACALL SHOW_ON_SEGMENT ; show accumilator on segment
  380 06BB 020667                   JMP LOOP ; end execution
  381 06BE 22               RET
  382 06BF                  
  383 06BF BC0403           INC_A_MNEMONIC: CJNE R4, #004H, ADD_IMMEDIATE_MNEMONIC
  384 06C2 04                   INC A ; Increase A
  385 06C3 09                   INC R1 ; PC=PC+1
  386 06C4 22               RET
  387 06C5              
  388 06C5 BC240A           ADD_IMMEDIATE_MNEMONIC: CJNE R4, #024H, MOV_A_IMMIDIATE_MNEMONIC
  389 06C8 09                   INC R1 ; PC=PC+1
  390 06C9 F5FF                 MOV 0FFH, A
  391 06CB E7                   MOV A, @R1 
8051 Assembler           Version 1.00   06/29/123 22:28:21    Page 8
C:\Users\borna\OneDrive\Documents\uni-borna\computer structure\project\codes\MPF - Copy.a51



  392 06CC FC                   MOV R4, A ; Move the value in next memory location to R4
  393 06CD E5FF                 MOV A, 0FFH
  394 06CF 2C                   ADD A, R4 ; Add A with the value in the next memory location
  395 06D0 09                   INC R1 ; PC=PC+1
  396 06D1 22               RET
  397 06D2              
  398 06D2 BC7404           MOV_A_IMMIDIATE_MNEMONIC: CJNE R4, #074H, INVALID_OPCODE
  399 06D5 09                   INC R1 
  400 06D6 E7                   MOV A, @R1
  401 06D7 09                   INC R1
  402 06D8 22               RET
  403 06D9              
  404 06D9                  INVALID_OPCODE:
  405 06D9 7590FF               MOV P1, #0FFH
  406 06DC 0206DC               ERROR: JMP ERROR
  407 06DF 22               RET
  408 06E0              
  409 06E0              
  410 06E0              ; delay  generator subroutine
  411 06E0              DELAY:
  412 06E0 75FE0A           MOV 0FEH, #00AH ; Following delay will reapeat  31 times
  413 06E3 758901           WAIT2:MOV TMOD, #001H
  414 06E6 758A00           MOV TL0, #000H
  415 06E9 758C00           MOV TH0, #000H
  416 06EC D28C             SETB TR0
  417 06EE 308DFD           WAIT1: JNB TF0, WAIT1
  418 06F1 C28D             CLR TF0
  419 06F3 C28C             CLR TR0
  420 06F5 D5FEEB           DJNZ 0FEH, WAIT2
  421 06F8 22               RET
  422 06F9                  
  423 06F9              END

Defined Symbols:
  ADR_MINUS                                 000012  18
  ADR_PLUS                                  000011  17
  END_FLAG                                  0000C1  193
  END_KEY                                   000014  20
  EXE_FLAG                                  0000C0  192
  EXECUTE                                   000013  19
  F1                                        0000C0  192
  F2                                        0000C1  193
  F3                                        0000C2  194
  F4                                        0000C3  195
  F5                                        0000C4  196
  F6                                        0000C5  197
  F7                                        0000C6  198
  F8                                        0000C7  199
  NO_KEY                                    0000FF  255
  NUMBER_INPUT_FLAG                         0000D5  213
  ORG_KEY                                   000010  16
  WRONG_FLAG                                0000C2  194

Defined Labels:
  ADD_IMMEDIATE_MNEMONIC                    0006C5  1733
  ADR_MINUS_CLICK_7                         00060B  1547
  ADR_PLUS_CLICK_7                          0005FE  1534
  CASE_0                                    000571  1393
  CASE_1                                    00057F  1407
  CASE_2                                    00058F  1423
  CASE_3                                    00059F  1439
  CASE_4                                    0005B9  1465
  CASE_5                                    0005C9  1481
  CASE_6                                    0005D9  1497
  CASE_7                                    0005F1  1521
  COL_ROW_TO_KEY                            00053E  1342
  DECODE_AND_EXECUTE                        0006B6  1718
  DEFAULT_CALL                              000655  1621
  DEFAULT_CASE                              00061D  1565
  DELAY                                     0006E0  1760
  ERROR                                     0006DC  1756
  EXE_CLICK_3                               0005A2  1442
  EXE_CLICK_6                               0005DC  1500
  EXECUTE_END                               0006B9  1721
  F1_CALL                                   00062E  1582
  F2_CALL                                   000632  1586
  F3_CALL                                   000637  1591
  F4_CALL                                   00063C  1596
  F5_CALL                                   000641  1601
  F6_CALL                                   000646  1606
  F7_CALL                                   00064C  1612
  F8_CALL                                   000652  1618
  FETCH                                     0006AB  1707
  FIND_INDEX_LOOP                           000510  1296
  FUNCTION_CALL                             00062E  1582
  GENERAL_KEY                               000571  1393
  GET_COL                                   00050C  1292
  GET_ROW                                   000519  1305
  INC_A_MNEMONIC                            0006BF  1727
  INDEX_FOUND                               000518  1304
  INIT                                      00066A  1642
  INIT_RUN                                  0006A5  1701
  INVALID_OPCODE                            0006D9  1753
  ISR_NON_END                               00001F  31
  ISR_NON_EXE                               000014  20
  ISR_NON_WRONG                             000019  25
  KEY_INPUT                                 0004FF  1279
  KEY_MAP                                   000CFF  3327
  LOOP                                      000667  1639
  MAIN                                      000665  1637
  MOV_A_IMMIDIATE_MNEMONIC                  0006D2  1746
  NON_NUMBER_KEY_1                          00058C  1420
  NON_NUMBER_KEY_2                          00059C  1436
  NON_NUMBER_KEY_3                          0005B6  1462
  NON_NUMBER_KEY_4                          0005C6  1478
  NON_NUMBER_KEY_5                          0005D6  1494
  NON_NUMBER_KEY_6                          0005EE  1518
  NON_NUMERIC                               00055F  1375
  NON_SPECIAL_FUNCTION                      000555  1365
  NOP_MNEMONIC                              0006B6  1718
  NUMBER_KEY_1                              000582  1410
  NUMBER_KEY_2                              000592  1426
  NUMBER_KEY_3                              0005AE  1454
  NUMBER_KEY_4                              0005BC  1468
  NUMBER_KEY_5                              0005CC  1484
  NUMBER_KEY_6                              0005E6  1510
  ORG_CLICK_0                               000574  1396
  ORG_CLICK_7                               0005F4  1524
  ROW1                                      000519  1305
  ROW2                                      000523  1315
  ROW3                                      00052F  1327
  ROW4                                      00053B  1339
  RUN_CODE                                  0006A5  1701
  RUN_EXE                                   000698  1688
  SET_DATA_ON_SEGMENT                       000658  1624
  SHOW_ON_SEGMENT                           000662  1634
  SHOW_R2_ON_SEGMENT                        000660  1632
  UPDATE_ADDRESS_INPUT                      000620  1568
  UPDATE_DATA_INPUT                         000627  1575
  UPDATE_MEMORY                             00069C  1692
  UPDATE_STATE_FLAGS                        000548  1352
  WAIT1                                     0006EE  1774
  WAIT2                                     0006E3  1763
  WRONG_KEY                                 00061B  1563
  WRONG_KEY_0                               00057C  1404
  WRONG_KEY_3                               0005AE  1454
  WRONG_KEY_6                               0005E6  1510
  WRONG_KEY_7                               000618  1560
  WRONG_PRESS                               00068A  1674
