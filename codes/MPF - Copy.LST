8051 Assembler           Version 1.00   06/30/123 13:34:36    Page 1
C:\Users\borna\OneDrive\Documents\uni-borna\computer structure\project\codes\MPF - Copy.a51



    1 0000              ;====================================================================
    2 0000              ; DEFINITIONS
    3 0000              ;====================================================================
    4 0000              ; addresses
    5 0000              ;====================================================================
    6 0000              ; in coding mode
    7 0000              ; R0 is the State of the FSM
    8 0000              ; R1 is the Input
    9 0000              ; R2 is the input data
   10 0000              ; R3 is the input address
   11 0000              ;====================================================================
   12 0000              ; in execution mode
   13 0000              ; R6 is the beginning address
   14 0000              ; R1 is the PC
   15 0000              ; R3 is the stack
   16 0000              ; R4 is the IR
   17 0000              ;====================================================================
   18 0000              ; 00H to 0FH are numeric inputs
   19 0000              ORG_KEY EQU 010H
   20 0000              ADR_PLUS EQU 011H
   21 0000              ADR_MINUS EQU 012H
   22 0000              EXECUTE EQU 013H
   23 0000              END_KEY EQU 014H
   24 0000              NO_KEY EQU 0FFH
   25 0000              ; instructions starting from C0H
   26 0000              F1 EQU 0C0H
   27 0000              F2 EQU 0C1H
   28 0000              F3 EQU 0C2H
   29 0000              F4 EQU 0C3H
   30 0000              F5 EQU 0C4H
   31 0000              F6 EQU 0C5H
   32 0000              F7 EQU 0C6H
   33 0000              F8 EQU 0C7H
   34 0000              ; flags
   35 0000              NUMBER_INPUT_FLAG EQU F0
   36 0000              EXE_FLAG EQU F1
   37 0000              END_FLAG EQU F2
   38 0000              WRONG_FLAG EQU F3
   39 0000              ;====================================================================
   40 0000              ; VARIABLES
   41 0000              ;====================================================================
   42 0CFF              ORG 0CFFH
   43 0CFF              KEY_MAP:
   44 0CFF 00 01 02         DB 000H, 001H, 002H, 003H, ORG_KEY, EXECUTE, ADR_PLUS, ADR_MINUS
      0D02 03 10 13
      0D05 11 12
   45 0D07 04 05 06         DB 004H, 005H, 006H, 007H, END_KEY, NO_KEY, NO_KEY, NO_KEY
      0D0A 07 14 FF
      0D0D FF FF
   46 0D0F 08 09 0A         DB 008H, 009H, 00AH, 00BH, F1, F2, F3, F4
      0D12 0B C0 C1
      0D15 C2 C3
   47 0D17 0C 0D 0E         DB 00CH, 00DH, 00EH, 00FH, F5, F6, F7, F8
      0D1A 0F C4 C5
      0D1D C6 C7
   48 0D1F              
   49 0D1F              
8051 Assembler           Version 1.00   06/30/123 13:34:36    Page 2
C:\Users\borna\OneDrive\Documents\uni-borna\computer structure\project\codes\MPF - Copy.a51



   50 0000              ORG 0000H
   51 0000 02067E           JMP MAIN
   52 0003              
   53 0003              ; ISR
   54 0003              ORG 0003H
   55 0003 C2B1             CLR P3.1                    ; Disable interrupt
   56 0005 C2AF             CLR EA                      ; No interrupt will be acknowledged
   57 0007 C2A8             CLR EX0                     ; Disable external interrupt0
   58 0009 91FF             ACALL KEY_INPUT             ; updates R1
   59 000B B148             ACALL UPDATE_STATE_FLAGS    ; update R0 which is the state of the FSM, also save input data
   60 000D                  ; visualization
   61 000D D17B             ACALL SHOW_ON_SEGMENT
   62 000F                  ; check if we should execute
   63 000F 30C002           JNB EXE_FLAG, ISR_NON_EXE
   64 0012 D1AE             ACALL RUN_EXE
   65 0014                  ISR_NON_EXE:
   66 0014                  ; check if wrong key was pressed
   67 0014 30C202           JNB WRONG_FLAG, ISR_NON_WRONG
   68 0017 D1A0             ACALL WRONG_PRESS
   69 0019                  ISR_NON_WRONG:
   70 0019                  ; check if code should be run
   71 0019 30C103           JNB END_FLAG, ISR_NON_END
   72 001C 0206BB           JMP RUN_CODE ; go to execution
   73 001F                  ISR_NON_END:
   74 001F                  ; reset and return from interrupt   
   75 001F D2AF             SETB EA             ; Enable interrupt individually
   76 0021 D2A8             SETB EX0            ; Enable external interrupt0
   77 0023 D2B1             SETB P3.1           ; Enable interrupt
   78 0025 32               RETI                ; Return from interrupt
   79 0026              
   80 04FF              ORG 04FFH
   81 04FF              
   82 04FF              KEY_INPUT:
   83 04FF B10C             ACALL GET_COL
   84 0501 B119             ACALL GET_ROW 
   85 0503 B13E             ACALL COL_ROW_TO_KEY ; save corresponding key value to R1 register
   86 0505 758000           MOV P0, #000H
   87 0508 75A0FF           MOV P2, #0FFH
   88 050B 22               RET
   89 050C              
   90 050C              GET_COL:
   91 050C E5A0             MOV A, P2
   92 050E 7C00             MOV R4, #000H
   93 0510                  FIND_INDEX_LOOP:
   94 0510 30E005               JNB ACC.0, INDEX_FOUND  ; Jump if the lowest bit of A is set
   95 0513 0C                   INC R4  ; Increment the index counter
   96 0514 13                   RRC A  ; Rotate A right through carry
   97 0515 020510               JMP FIND_INDEX_LOOP
   98 0518                  INDEX_FOUND:
   99 0518 22                   RET
  100 0519              GET_ROW:
  101 0519                  ROW1:
  102 0519 B280                 CPL P0.0
  103 051B E5A0                 MOV A, P2
  104 051D B4FF03               CJNE A, #0FFH, ROW2
  105 0520 7D00                 MOV R5, #000H
  106 0522 22                   RET
8051 Assembler           Version 1.00   06/30/123 13:34:36    Page 3
C:\Users\borna\OneDrive\Documents\uni-borna\computer structure\project\codes\MPF - Copy.a51



  107 0523                  ROW2:
  108 0523 B280                 CPL P0.0
  109 0525 B281                 CPL P0.1
  110 0527 E5A0                 MOV A, P2
  111 0529 B4FF03               CJNE A, #0FFH, ROW3
  112 052C 7D01                 MOV R5, #001H
  113 052E 22                   RET
  114 052F                  ROW3:
  115 052F B281                 CPL P0.1
  116 0531 B282                 CPL P0.2
  117 0533 E5A0                 MOV A, P2
  118 0535 B4FF03               CJNE A, #0FFH, ROW4
  119 0538 7D02                 MOV R5, #002H
  120 053A 22                   RET
  121 053B                  ROW4:
  122 053B 7D03                 MOV R5, #003H
  123 053D 22                   RET
  124 053E              COL_ROW_TO_KEY:
  125 053E ED               MOV A, R5
  126 053F C4               SWAP A
  127 0540 03               RR A
  128 0541 4C               ORL A, R4
  129 0542 900CFF           MOV DPTR, #KEY_MAP
  130 0545 93               MOVC A, @A+DPTR  ; Fetch value from the lookup table
  131 0546 F9               MOV R1, A
  132 0547 22               RET
  133 0548              
  134 0548              
  135 0548              UPDATE_STATE_FLAGS:
  136 0548                  ; check if input was a special function, should not change accumulator value
  137 0548 F5FF             MOV 0FFH, A
  138 054A E9               MOV A, R1
  139 054B 54F0             ANL A, #0F0H
  140 054D B4C005           CJNE A, #0C0H, NON_SPECIAL_FUNCTION
  141 0550 E5FF             MOV A, 0FFH
  142 0552 D147             ACALL FUNCTION_CALL
  143 0554 22               RET
  144 0555                  NON_SPECIAL_FUNCTION:
  145 0555                  ; check if input is numeric
  146 0555 E9               MOV A, R1
  147 0556 54F0             ANL A, #0F0H
  148 0558 C2D5             CLR NUMBER_INPUT_FLAG
  149 055A B40002           CJNE A, #0H, NON_NUMERIC
  150 055D D2D5             SETB NUMBER_INPUT_FLAG
  151 055F                  NON_NUMERIC:
  152 055F C2C0             CLR EXE_FLAG    ; will be set in cases
  153 0561 C2C2             CLR WRONG_FLAG  ; will be set in cases
  154 0563 C2C1             CLR END_FLAG
  155 0565                  ; check if input was END
  156 0565 B91409           CJNE R1, #END_KEY, GENERAL_KEY
  157 0568 D2C1             SETB END_FLAG
  158 056A 7800             MOV R0, #000H   ; reset state
  159 056C 7A00             MOV R2, #000H   ; reset address register
  160 056E 7B00             MOV R3, #000H   ; reset data register
  161 0570 22               RET
  162 0571                  ; Perform the switch-case
  163 0571                  GENERAL_KEY:
8051 Assembler           Version 1.00   06/30/123 13:34:36    Page 4
C:\Users\borna\OneDrive\Documents\uni-borna\computer structure\project\codes\MPF - Copy.a51



  164 0571 B8000B               CASE_0: CJNE R0, #00H , CASE_1
  165 0574                          ORG_CLICK_0:
  166 0574 B91005                       CJNE R1, #ORG_KEY, WRONG_KEY_0
  167 0577 7801                         MOV R0, #001H    ; update state
  168 0579 02062D                       JMP DEFAULT_CASE
  169 057C                          WRONG_KEY_0:
  170 057C 02062B                       JMP WRONG_KEY
  171 057F B8010D               CASE_1: CJNE R0, #01H , CASE_2
  172 0582                          NUMBER_KEY_1:
  173 0582 30D507                       JNB NUMBER_INPUT_FLAG, NON_NUMBER_KEY_1
  174 0585 7802                         MOV R0, #002H
  175 0587 D139                         ACALL UPDATE_ADDRESS_INPUT
  176 0589 02062D                       JMP DEFAULT_CASE
  177 058C                          NON_NUMBER_KEY_1:
  178 058C 02062B                       JMP WRONG_KEY
  179 058F B8020D               CASE_2: CJNE R0, #02H , CASE_3
  180 0592                          NUMBER_KEY_2:
  181 0592 30D507                       JNB NUMBER_INPUT_FLAG, NON_NUMBER_KEY_2
  182 0595 7803                         MOV R0, #003H
  183 0597 D139                         ACALL UPDATE_ADDRESS_INPUT
  184 0599 02062D                       JMP DEFAULT_CASE
  185 059C                          NON_NUMBER_KEY_2:
  186 059C 02062B                       JMP WRONG_KEY
  187 059F B80319               CASE_3: CJNE R0, #03H , CASE_4
  188 05A2                          EXE_CLICK_3:
  189 05A2 B9130B                       CJNE R1, #EXECUTE, WRONG_KEY_3
  190 05A5 7804                         MOV R0, #004H
  191 05A7                              ; beginning value of PC
  192 05A7 EB                           MOV A , R3
  193 05A8 FE                           MOV R6, A
  194 05A9 D2C0                         SETB EXE_FLAG 
  195 05AB D130                         ACALL RESET_DATA_REG
  196 05AD 02062D                       JMP DEFAULT_CASE
  197 05B0                          WRONG_KEY_3:
  198 05B0                              NUMBER_KEY_3: 
  199 05B0 30D505                           JNB NUMBER_INPUT_FLAG, NON_NUMBER_KEY_3
  200 05B3 D139                             ACALL UPDATE_ADDRESS_INPUT
  201 05B5 02062D                           JMP DEFAULT_CASE
  202 05B8                              NON_NUMBER_KEY_3:
  203 05B8 02062B                           JMP WRONG_KEY
  204 05BB B8041F               CASE_4: CJNE R0, #04H , CASE_5
  205 05BE                          NUMBER_KEY_4:
  206 05BE 30D507                       JNB NUMBER_INPUT_FLAG, ADR_PLUS_CLICK_4
  207 05C1 7805                         MOV R0, #005H
  208 05C3 D140                         ACALL UPDATE_DATA_INPUT
  209 05C5 02062D                       JMP DEFAULT_CASE
  210 05C8                          ADR_PLUS_CLICK_4:
  211 05C8 B91106                       CJNE R1, #ADR_PLUS, ADR_MINUS_CLICK_4
  212 05CB 0B                           INC R3
  213 05CC D130                         ACALL RESET_DATA_REG
  214 05CE 02062D                       JMP DEFAULT_CASE
  215 05D1                          ADR_MINUS_CLICK_4:
  216 05D1 B91206                       CJNE R1, #ADR_MINUS, WRONG_KEY_4
  217 05D4 1B                           DEC R3
  218 05D5 D130                         ACALL RESET_DATA_REG
  219 05D7 02062D                       JMP DEFAULT_CASE
  220 05DA                          WRONG_KEY_4:
8051 Assembler           Version 1.00   06/30/123 13:34:36    Page 5
C:\Users\borna\OneDrive\Documents\uni-borna\computer structure\project\codes\MPF - Copy.a51



  221 05DA 02062B                       JMP WRONG_KEY
  222 05DD B8050D               CASE_5: CJNE R0, #05H , CASE_6
  223 05E0                          NUMBER_KEY_5:
  224 05E0 30D507                       JNB NUMBER_INPUT_FLAG, NON_NUMBER_KEY_5
  225 05E3 7806                         MOV R0, #006H
  226 05E5 D140                         ACALL UPDATE_DATA_INPUT
  227 05E7 02062D                       JMP DEFAULT_CASE
  228 05EA                          NON_NUMBER_KEY_5:
  229 05EA 02062B                       JMP WRONG_KEY
  230 05ED B80615               CASE_6: CJNE R0, #06H , CASE_7
  231 05F0                          EXE_CLICK_6:
  232 05F0 B91307                       CJNE R1, #EXECUTE, WRONG_KEY_6
  233 05F3 7807                         MOV R0, #007H
  234 05F5 D2C0                         SETB EXE_FLAG
  235 05F7 02062D                       JMP DEFAULT_CASE
  236 05FA                          WRONG_KEY_6:
  237 05FA                              NUMBER_KEY_6: 
  238 05FA 30D505                           JNB NUMBER_INPUT_FLAG, NON_NUMBER_KEY_6
  239 05FD D140                             ACALL UPDATE_DATA_INPUT
  240 05FF 02062D                           JMP DEFAULT_CASE
  241 0602                              NON_NUMBER_KEY_6:
  242 0602 02062B                           JMP WRONG_KEY
  243 0605 B80725               CASE_7: CJNE R0, #07H , DEFAULT_CASE
  244 0608                          ORG_CLICK_7:
  245 0608 B91007                       CJNE R1, #ORG_KEY, ADR_PLUS_CLICK_7
  246 060B 7801                         MOV R0, #001H
  247 060D D130                         ACALL RESET_DATA_REG
  248 060F 02062D                       JMP DEFAULT_CASE
  249 0612                          ADR_PLUS_CLICK_7:
  250 0612 B91108                       CJNE R1, #ADR_PLUS, ADR_MINUS_CLICK_7
  251 0615 7804                         MOV R0, #004H
  252 0617 0B                           INC R3
  253 0618 D130                         ACALL RESET_DATA_REG
  254 061A 02062D                       JMP DEFAULT_CASE
  255 061D                          ADR_MINUS_CLICK_7:
  256 061D B91208                       CJNE R1, #ADR_MINUS, WRONG_KEY_7
  257 0620 7804                         MOV R0, #004H
  258 0622 1B                           DEC R3
  259 0623 D130                         ACALL RESET_DATA_REG
  260 0625 02062D                       JMP DEFAULT_CASE
  261 0628                          WRONG_KEY_7:
  262 0628 02062B                       JMP WRONG_KEY
  263 062B                  WRONG_KEY:
  264 062B D2C2                 SETB WRONG_FLAG
  265 062D                  DEFAULT_CASE:
  266 062D D171                 ACALL SET_DATA_ON_SEGMENT
  267 062F 22                   RET
  268 0630              
  269 0630              RESET_DATA_REG:
  270 0630 88FF             MOV 0FFH, R0
  271 0632 EB               MOV A, R3
  272 0633 F8               MOV R0, A
  273 0634 E6               MOV A , @R0 
  274 0635 FA               MOV R2, A
  275 0636 A8FF             MOV R0, 0FFH
  276 0638 22               RET
  277 0639              
8051 Assembler           Version 1.00   06/30/123 13:34:36    Page 6
C:\Users\borna\OneDrive\Documents\uni-borna\computer structure\project\codes\MPF - Copy.a51



  278 0639              UPDATE_ADDRESS_INPUT:
  279 0639 EB               MOV A, R3 ; load current input address
  280 063A C4               SWAP A
  281 063B 54F0             ANL A, #0F0H
  282 063D 49               ORL A, R1 
  283 063E FB               MOV R3, A
  284 063F 22               RET
  285 0640              
  286 0640              UPDATE_DATA_INPUT:
  287 0640 EA               MOV A, R2 ; load current input data
  288 0641 C4               SWAP A
  289 0642 54F0             ANL A, #0F0H
  290 0644 49               ORL A, R1 
  291 0645 FA               MOV R2, A
  292 0646 22               RET
  293 0647              
  294 0647              FUNCTION_CALL:
  295 0647 B9C001           F1_CALL: CJNE R1, #F1, F2_CALL
  296 064A 22               RET ; do nothing, it should show the accumilator
  297 064B B9C102           F2_CALL: CJNE R1, #F2, F3_CALL
  298 064E E8               MOV A, R0 ; show current state
  299 064F 22               RET
  300 0650 B9C202           F3_CALL: CJNE R1, #F3, F4_CALL
  301 0653 EB               MOV A, R3 ; show current adress
  302 0654 22               RET
  303 0655 B9C302           F4_CALL: CJNE R1, #F4, F5_CALL
  304 0658 EA               MOV A, R2 ; show current data
  305 0659 22               RET
  306 065A B9C402           F5_CALL: CJNE R1, #F5, F6_CALL
  307 065D EE               MOV A, R6 ; show code start
  308 065E 22               RET
  309 065F B9C503           F6_CALL: CJNE R1, #F6, F7_CALL
  310 0662 E5F0             MOV A, B ; show B register
  311 0664 22               RET
  312 0665 B9C603           F7_CALL: CJNE R1, #F7, F8_CALL
  313 0668 E5CF             MOV A, 0CFH ; show data in specific part of memory
  314 066A 22               RET
  315 066B B9C700           F8_CALL: CJNE R1, #F8, DEFAULT_CALL
  316 066E                  DEFAULT_CALL:
  317 066E D171             ACALL SET_DATA_ON_SEGMENT
  318 0670 22               RET
  319 0671              
  320 0671              SET_DATA_ON_SEGMENT:
  321 0671 E8               MOV A , R0
  322 0672 54FC             ANL A, #11111100B
  323 0674 B40002           CJNE A, #0H , SHOW_R2_ON_SEGMENT
  324 0677 EB               MOV A, R3
  325 0678 22               RET
  326 0679                  SHOW_R2_ON_SEGMENT:
  327 0679 EA               MOV A, R2
  328 067A 22               RET
  329 067B              
  330 067B              SHOW_ON_SEGMENT: ; current implementation is very basic
  331 067B F590             MOV P1, A
  332 067D 22               RET
  333 067E              
  334 067E              MAIN:
8051 Assembler           Version 1.00   06/30/123 13:34:36    Page 7
C:\Users\borna\OneDrive\Documents\uni-borna\computer structure\project\codes\MPF - Copy.a51



  335 067E 758000           MOV P0, #000H   ; define P0 as output
  336 0681 75A0FF           MOV P2, #0FFH   ; define P2 as input
  337 0684 759000           MOV P1, #000H   ; define P1 as output
  338 0687              START:
  339 0687 D288             SETB IT0        ; Falling edge interrupt
  340 0689 C2AA             CLR EX1         ; Disable external interrupt 1
  341 068B 7800             MOV R0, #000H   ; initialize R0 which is the state register
  342 068D 7900             MOV R1, #000H   ; initialize R1 which is the input register
  343 068F 7A00             MOV R2, #000H   ; initialize R2 which is the current data 
  344 0691 7B00             MOV R3, #000H   ; initialize R3 which is the current address
  345 0693 C2D5             CLR NUMBER_INPUT_FLAG 
  346 0695 C2C1             CLR END_FLAG
  347 0697 C2C0             CLR EXE_FLAG
  348 0699 D2AF             SETB EA         ; Enable interrupt individually
  349 069B D2A8             SETB EX0        ; Enable external interrupt0
  350 069D              LOOP:
  351 069D 02069D           JMP LOOP
  352 06A0              
  353 06A0              WRONG_PRESS: ; make the segments blink
  354 06A0 8590F0           MOV B, P1 ; save current value showing
  355 06A3 7488             MOV A, #88H
  356 06A5 D17B             ACALL SHOW_ON_SEGMENT
  357 06A7 F1E1             ACALL DELAY
  358 06A9 E5F0             MOV A, B
  359 06AB D17B             ACALL SHOW_ON_SEGMENT
  360 06AD 22               RET
  361 06AE                  
  362 06AE              RUN_EXE:
  363 06AE B80401           CJNE R0, #004H, UPDATE_MEMORY
  364 06B1 22               RET ; address is already saved in R3, no need for change
  365 06B2                  UPDATE_MEMORY:
  366 06B2 88F0             MOV B, R0 ; temporary memory
  367 06B4 EB               MOV A, R3
  368 06B5 F8               MOV R0, A
  369 06B6 EA               MOV A, R2
  370 06B7 F6               MOV @R0, A
  371 06B8 A8F0             MOV R0, B
  372 06BA 22               RET
  373 06BB              
  374 06BB              RUN_CODE:
  375 06BB                  INIT_RUN:
  376 06BB EE               MOV A , R6
  377 06BC F9               MOV R1, A       ; PC
  378 06BD                  ; we do not use a MAR since using basic asm we can implement its functionality
  379 06BD 7C00             MOV R4, #00H    ; IR
  380 06BF 7B00             MOV R3, #00H    ; STACK
  381 06C1                  FETCH:
  382 06C1 F5FF             MOV 0FFH, A
  383 06C3 E7               MOV A, @R1
  384 06C4 FC               MOV R4, A ; IR <- @PC
  385 06C5                  ; testing purposes
  386 06C5                  ; ACALL SHOW_ON_SEGMENT
  387 06C5                  ; ACALL DELAY
  388 06C5 E5FF             MOV A, 0FFH
  389 06C7 09               INC R1 ; PC <- PC + 1
  390 06C8 D1CD             ACALL DECODE_AND_EXECUTE
  391 06CA 0206C1           JMP FETCH ; will not exit, need to use RST, or write new code
8051 Assembler           Version 1.00   06/30/123 13:34:36    Page 8
C:\Users\borna\OneDrive\Documents\uni-borna\computer structure\project\codes\MPF - Copy.a51



  392 06CD                  
  393 06CD              DECODE_AND_EXECUTE:
  394 06CD BC0006           NOP_MNEMONIC: CJNE R4, #000H, INC_A_MNEMONIC
  395 06D0                      EXECUTE_END: 
  396 06D0 D17B                     ACALL SHOW_ON_SEGMENT ; show accumilator on segment
  397 06D2 020687                   JMP START ; end execution
  398 06D5 22               RET
  399 06D6                  
  400 06D6 BC0402           INC_A_MNEMONIC: CJNE R4, #004H, INC_R0_MNEMONIC
  401 06D9 04                   INC A ; Increase A
  402 06DA 22               RET
  403 06DB                  
  404 06DB BC0802           INC_R0_MNEMONIC: CJNE R4, #008H, INC_R2_MNEMONIC
  405 06DE 08                   INC R0 ; Increase R0
  406 06DF 22               RET
  407 06E0                  
  408 06E0 BC0A02           INC_R2_MNEMONIC: CJNE R4, #00AH, INC_R5_MNEMONIC
  409 06E3 0A                   INC R2 ; Increase R2
  410 06E4 22               RET
  411 06E5                  
  412 06E5 BC0D02           INC_R5_MNEMONIC: CJNE R4, #00DH, INC_R7_MNEMONIC
  413 06E8 0D                   INC R5 ; Increase R5
  414 06E9 22               RET
  415 06EA                  
  416 06EA BC0F02           INC_R7_MNEMONIC: CJNE R4, #00FH, ACALL_MNEMONIC
  417 06ED 0F                   INC R7 ; Increase R7
  418 06EE 22               RET
  419 06EF                  
  420 06EF BC110B           ACALL_MNEMONIC: CJNE R4, #011H, DEC_A_MNEMONIC
  421 06F2 09                   INC R1 ; PC=PC+1
  422 06F3 F5FF                 MOV 0FFH, A
  423 06F5 E9                   MOV A, R1
  424 06F6 FB                   MOV R3, A ; Move next PC value to stack
  425 06F7 19                   DEC R1
  426 06F8 E7                   MOV A, @R1 
  427 06F9 F9                   MOV R1, A ; Move the next address to PC
  428 06FA E5FF                 MOV A, 0FFH
  429 06FC 22               RET
  430 06FD                  
  431 06FD BC1402           DEC_A_MNEMONIC: CJNE R4, #014H, DEC_R0_MNEMONIC
  432 0700 14                   DEC A
  433 0701 22               RET
  434 0702                  
  435 0702 BC1802           DEC_R0_MNEMONIC: CJNE R4, #018H, DEC_R2_MNEMONIC
  436 0705 18                   DEC R0
  437 0706 22               RET
  438 0707                  
  439 0707 BC1A02           DEC_R2_MNEMONIC: CJNE R4, #01AH, DEC_R5_MNEMONIC
  440 070A 1A                   DEC R2
  441 070B 22               RET
  442 070C                  
  443 070C BC1D02           DEC_R5_MNEMONIC: CJNE R4, #01DH, DEC_R7_MNEMONIC
  444 070F 1D                   DEC R5
  445 0710 22               RET
  446 0711                  
  447 0711 BC1F02           DEC_R7_MNEMONIC: CJNE R4, #01FH, JB_MNEMONIC
  448 0714 1F                   DEC R7
8051 Assembler           Version 1.00   06/30/123 13:34:36    Page 9
C:\Users\borna\OneDrive\Documents\uni-borna\computer structure\project\codes\MPF - Copy.a51



  449 0715 22               RET
  450 0716                  
  451 0716 BC2001           JB_MNEMONIC: CJNE R4, #020H, RET_MNEMONIC
  452 0719                      
  453 0719 22               RET
  454 071A                  
  455 071A BC2207           RET_MNEMONIC: CJNE R4, #022H, ADD_IMMEDIATE_MNEMONIC
  456 071D F5FF                 MOV 0FFH, A
  457 071F EB                   MOV A, R3
  458 0720 F9                   MOV R1, A ; Move stack to PC
  459 0721 E5FF                 MOV A, 0FFH
  460 0723 22               RET
  461 0724                  
  462 0724 BC2409           ADD_IMMEDIATE_MNEMONIC: CJNE R4, #024H, ADD_R0_MNEMONIC
  463 0727 F5FF                 MOV 0FFH, A
  464 0729 E7                   MOV A, @R1 
  465 072A FC                   MOV R4, A ; Move the value in next memory location to R4
  466 072B E5FF                 MOV A, 0FFH
  467 072D 2C                   ADD A, R4 ; Add A with the value in the next memory location
  468 072E 09                   INC R1 ; PC=PC+1
  469 072F 22               RET
  470 0730                  
  471 0730 BC2802           ADD_R0_MNEMONIC: CJNE R4, #028H, ADD_R2_MNEMONIC
  472 0733 28                   ADD A, R0
  473 0734 22               RET
  474 0735                  
  475 0735 BC2A02           ADD_R2_MNEMONIC: CJNE R4, #02AH, ADD_R5_MNEMONIC
  476 0738 2A                   ADD A, R2
  477 0739 22               RET
  478 073A                  
  479 073A BC2D02           ADD_R5_MNEMONIC: CJNE R4, #02DH, ADD_R7_MNEMONIC
  480 073D 2D                   ADD A, R5
  481 073E 22               RET
  482 073F                  
  483 073F BC2F02           ADD_R7_MNEMONIC: CJNE R4, #02FH, ADDC_IMMIDIATE_MNEMONIC
  484 0742 2F                   ADD A, R7
  485 0743 22               RET
  486 0744                  
  487 0744 BC3409           ADDC_IMMIDIATE_MNEMONIC: CJNE R4, #034H, JZ_MNEMONIC
  488 0747 F5FF                 MOV 0FFH, A
  489 0749 E7                   MOV A, @R1 
  490 074A FC                   MOV R4, A ; Move the value in next memory location to R4
  491 074B E5FF                 MOV A, 0FFH
  492 074D 3C                   ADDC A, R4 ; Add A with the value in the next memory location
  493 074E 09                   INC R1 ; PC=PC+1
  494 074F 22               RET
  495 0750                  
  496 0750 BC600B           JZ_MNEMONIC: CJNE R4, #060H, JNZ_MNEMONIC
  497 0753 6002                 JZ ZERO_JZ_MNEMONIC
  498 0755 09                   INC R1
  499 0756 22                   RET
  500 0757                      ZERO_JZ_MNEMONIC:
  501 0757 F5FF                 MOV 0FFH, A
  502 0759 E7                   MOV A, @R1 
  503 075A F9                   MOV R1, A
  504 075B E5FF                 MOV A, 0FFH
  505 075D 22               RET
8051 Assembler           Version 1.00   06/30/123 13:34:36    Page 10
C:\Users\borna\OneDrive\Documents\uni-borna\computer structure\project\codes\MPF - Copy.a51



  506 075E                  
  507 075E BC700B           JNZ_MNEMONIC: CJNE R4, #070H, AJMP_MNEMONIC
  508 0761 7002                 JNZ NZERO_JZ_MNEMONIC
  509 0763 09                   INC R1
  510 0764 22                   RET
  511 0765                      NZERO_JZ_MNEMONIC:
  512 0765 F5FF                 MOV 0FFH, A
  513 0767 E7                   MOV A, @R1 
  514 0768 F9                   MOV R1, A
  515 0769 E5FF                 MOV A, 0FFH
  516 076B 22               RET
  517 076C                  
  518 076C BC6107           AJMP_MNEMONIC: CJNE R4, #061H, MOV_A_IMMIDIATE_MNEMONIC
  519 076F F5FF                 MOV 0FFH, A
  520 0771 E7                   MOV A, @R1 
  521 0772 F9                   MOV R1, A ; Move the next address to PC
  522 0773 E5FF                 MOV A, 0FFH
  523 0775 22               RET
  524 0776                  
  525 0776 BC7403           MOV_A_IMMIDIATE_MNEMONIC: CJNE R4, #074H, MOV_R0_IMMIDIATE_MNEMONIC
  526 0779 E7                   MOV A, @R1
  527 077A 09                   INC R1
  528 077B 22               RET
  529 077C                  
  530 077C BC7808           MOV_R0_IMMIDIATE_MNEMONIC: CJNE R4, #078H, MOV_R2_IMMIDIATE_MNEMONIC
  531 077F F5FF                 MOV 0FFH, A
  532 0781 E7                   MOV A, @R1
  533 0782 F8                   MOV R0, A
  534 0783 E5FF                 MOV A, 0FFH
  535 0785 09                   INC R1
  536 0786 22               RET
  537 0787                  
  538 0787 BC7A08           MOV_R2_IMMIDIATE_MNEMONIC: CJNE R4, #07AH, MOV_R5_IMMIDIATE_MNEMONIC
  539 078A F5FF                 MOV 0FFH, A
  540 078C E7                   MOV A, @R1
  541 078D FA                   MOV R2, A
  542 078E E5FF                 MOV A, 0FFH
  543 0790 09                   INC R1
  544 0791 22               RET
  545 0792                  
  546 0792 BC7D08           MOV_R5_IMMIDIATE_MNEMONIC: CJNE R4, #07DH, MOV_R7_IMMIDIATE_MNEMONIC
  547 0795 F5FF                 MOV 0FFH, A
  548 0797 E7                   MOV A, @R1
  549 0798 FD                   MOV R5, A
  550 0799 E5FF                 MOV A, 0FFH
  551 079B 09                   INC R1
  552 079C 22               RET
  553 079D                  
  554 079D BC7F08           MOV_R7_IMMIDIATE_MNEMONIC: CJNE R4, #07FH, MOV_A_R0_MNEMONIC
  555 07A0 F5FF                 MOV 0FFH, A
  556 07A2 E7                   MOV A, @R1
  557 07A3 FF                   MOV R7, A
  558 07A4 E5FF                 MOV A, 0FFH
  559 07A6 09                   INC R1
  560 07A7 22               RET
  561 07A8                  
  562 07A8 BCE802           MOV_A_R0_MNEMONIC: CJNE R4, #0E8H, MOV_A_R2_MNEMONIC
8051 Assembler           Version 1.00   06/30/123 13:34:36    Page 11
C:\Users\borna\OneDrive\Documents\uni-borna\computer structure\project\codes\MPF - Copy.a51



  563 07AB E8                   MOV A, R0
  564 07AC 22               RET
  565 07AD                  
  566 07AD BCEA02           MOV_A_R2_MNEMONIC: CJNE R4, #0EAH, MOV_A_R5_MNEMONIC
  567 07B0 EA                   MOV  A, R2
  568 07B1 22               RET
  569 07B2                  
  570 07B2 BCED02           MOV_A_R5_MNEMONIC: CJNE R4, #0EDH, MOV_A_R7_MNEMONIC
  571 07B5 ED                   MOV A, R5
  572 07B6 22               RET
  573 07B7                  
  574 07B7 BCEF02           MOV_A_R7_MNEMONIC: CJNE R4, #0EFH, CPL_A_MNEMONIC
  575 07BA EF                   MOV A, R7
  576 07BB 22               RET
  577 07BC                  
  578 07BC BCF402           CPL_A_MNEMONIC: CJNE R4, #0F4H, MOV_addrR1_A_MNEMONIC
  579 07BF F4                   CPL A
  580 07C0 22               RET
  581 07C1              
  582 07C1 BCF602           MOV_addrR1_A_MNEMONIC: CJNE R4, #0F6H, MOV_R0_A_MNEMONIC
  583 07C4 F6                   MOV @R0, A
  584 07C5 22               RET
  585 07C6                  
  586 07C6 BCF802           MOV_R0_A_MNEMONIC: CJNE R4, #0F8H, MOV_R2_A_MNEMONIC
  587 07C9 F8                   MOV R0, A
  588 07CA 22               RET
  589 07CB                  
  590 07CB BCFA02           MOV_R2_A_MNEMONIC: CJNE R4, #0FAH, MOV_R5_A_MNEMONIC
  591 07CE FA                   MOV R2, A
  592 07CF 22               RET
  593 07D0                  
  594 07D0 BCFD02           MOV_R5_A_MNEMONIC: CJNE R4, #0FDH, MOV_R7_A_MNEMONIC
  595 07D3 FD                   MOV R5, A
  596 07D4 22               RET
  597 07D5                  
  598 07D5 BCFF02           MOV_R7_A_MNEMONIC: CJNE R4, #0FFH, INVALID_OPCODE
  599 07D8 FF                   MOV R7, A
  600 07D9 22               RET
  601 07DA                  
  602 07DA                  INVALID_OPCODE:
  603 07DA 7590FF               MOV P1, #0FFH
  604 07DD 02069D               JMP LOOP
  605 07E0 22               RET
  606 07E1              
  607 07E1              
  608 07E1              ; delay  generator subroutine
  609 07E1              DELAY:
  610 07E1 75FE0A           MOV 0FEH, #00AH ; Following delay will reapeat  31 times
  611 07E4 758901           WAIT2:MOV TMOD, #001H
  612 07E7 758A00           MOV TL0, #000H
  613 07EA 758C00           MOV TH0, #000H
  614 07ED D28C             SETB TR0
  615 07EF 308DFD           WAIT1: JNB TF0, WAIT1
  616 07F2 C28D             CLR TF0
  617 07F4 C28C             CLR TR0
  618 07F6 D5FEEB           DJNZ 0FEH, WAIT2
  619 07F9 22               RET
8051 Assembler           Version 1.00   06/30/123 13:34:36    Page 12
C:\Users\borna\OneDrive\Documents\uni-borna\computer structure\project\codes\MPF - Copy.a51



  620 07FA                  
  621 07FA              END

Defined Symbols:
  ADR_MINUS                                 000012  18
  ADR_PLUS                                  000011  17
  END_FLAG                                  0000C1  193
  END_KEY                                   000014  20
  EXE_FLAG                                  0000C0  192
  EXECUTE                                   000013  19
  F1                                        0000C0  192
  F2                                        0000C1  193
  F3                                        0000C2  194
  F4                                        0000C3  195
  F5                                        0000C4  196
  F6                                        0000C5  197
  F7                                        0000C6  198
  F8                                        0000C7  199
  NO_KEY                                    0000FF  255
  NUMBER_INPUT_FLAG                         0000D5  213
  ORG_KEY                                   000010  16
  WRONG_FLAG                                0000C2  194

Defined Labels:
  ACALL_MNEMONIC                            0006EF  1775
  ADD_IMMEDIATE_MNEMONIC                    000724  1828
  ADD_R0_MNEMONIC                           000730  1840
  ADD_R2_MNEMONIC                           000735  1845
  ADD_R5_MNEMONIC                           00073A  1850
  ADD_R7_MNEMONIC                           00073F  1855
  ADDC_IMMIDIATE_MNEMONIC                   000744  1860
  ADR_MINUS_CLICK_4                         0005D1  1489
  ADR_MINUS_CLICK_7                         00061D  1565
  ADR_PLUS_CLICK_4                          0005C8  1480
  ADR_PLUS_CLICK_7                          000612  1554
  AJMP_MNEMONIC                             00076C  1900
  CASE_0                                    000571  1393
  CASE_1                                    00057F  1407
  CASE_2                                    00058F  1423
  CASE_3                                    00059F  1439
  CASE_4                                    0005BB  1467
  CASE_5                                    0005DD  1501
  CASE_6                                    0005ED  1517
  CASE_7                                    000605  1541
  COL_ROW_TO_KEY                            00053E  1342
  CPL_A_MNEMONIC                            0007BC  1980
  DEC_A_MNEMONIC                            0006FD  1789
  DEC_R0_MNEMONIC                           000702  1794
  DEC_R2_MNEMONIC                           000707  1799
  DEC_R5_MNEMONIC                           00070C  1804
  DEC_R7_MNEMONIC                           000711  1809
  DECODE_AND_EXECUTE                        0006CD  1741
  DEFAULT_CALL                              00066E  1646
  DEFAULT_CASE                              00062D  1581
  DELAY                                     0007E1  2017
  EXE_CLICK_3                               0005A2  1442
  EXE_CLICK_6                               0005F0  1520
  EXECUTE_END                               0006D0  1744
  F1_CALL                                   000647  1607
  F2_CALL                                   00064B  1611
  F3_CALL                                   000650  1616
  F4_CALL                                   000655  1621
  F5_CALL                                   00065A  1626
  F6_CALL                                   00065F  1631
  F7_CALL                                   000665  1637
  F8_CALL                                   00066B  1643
  FETCH                                     0006C1  1729
  FIND_INDEX_LOOP                           000510  1296
  FUNCTION_CALL                             000647  1607
  GENERAL_KEY                               000571  1393
  GET_COL                                   00050C  1292
  GET_ROW                                   000519  1305
  INC_A_MNEMONIC                            0006D6  1750
  INC_R0_MNEMONIC                           0006DB  1755
  INC_R2_MNEMONIC                           0006E0  1760
  INC_R5_MNEMONIC                           0006E5  1765
  INC_R7_MNEMONIC                           0006EA  1770
  INDEX_FOUND                               000518  1304
  INIT_RUN                                  0006BB  1723
  INVALID_OPCODE                            0007DA  2010
  ISR_NON_END                               00001F  31
  ISR_NON_EXE                               000014  20
  ISR_NON_WRONG                             000019  25
  JB_MNEMONIC                               000716  1814
  JNZ_MNEMONIC                              00075E  1886
  JZ_MNEMONIC                               000750  1872
  KEY_INPUT                                 0004FF  1279
  KEY_MAP                                   000CFF  3327
  LOOP                                      00069D  1693
  MAIN                                      00067E  1662
  MOV_A_IMMIDIATE_MNEMONIC                  000776  1910
  MOV_A_R0_MNEMONIC                         0007A8  1960
  MOV_A_R2_MNEMONIC                         0007AD  1965
  MOV_A_R5_MNEMONIC                         0007B2  1970
  MOV_A_R7_MNEMONIC                         0007B7  1975
  MOV_addrR1_A_MNEMONIC                     0007C1  1985
  MOV_R0_A_MNEMONIC                         0007C6  1990
  MOV_R0_IMMIDIATE_MNEMONIC                 00077C  1916
  MOV_R2_A_MNEMONIC                         0007CB  1995
  MOV_R2_IMMIDIATE_MNEMONIC                 000787  1927
  MOV_R5_A_MNEMONIC                         0007D0  2000
  MOV_R5_IMMIDIATE_MNEMONIC                 000792  1938
  MOV_R7_A_MNEMONIC                         0007D5  2005
  MOV_R7_IMMIDIATE_MNEMONIC                 00079D  1949
  NON_NUMBER_KEY_1                          00058C  1420
  NON_NUMBER_KEY_2                          00059C  1436
  NON_NUMBER_KEY_3                          0005B8  1464
  NON_NUMBER_KEY_5                          0005EA  1514
  NON_NUMBER_KEY_6                          000602  1538
  NON_NUMERIC                               00055F  1375
  NON_SPECIAL_FUNCTION                      000555  1365
  NOP_MNEMONIC                              0006CD  1741
  NUMBER_KEY_1                              000582  1410
  NUMBER_KEY_2                              000592  1426
  NUMBER_KEY_3                              0005B0  1456
  NUMBER_KEY_4                              0005BE  1470
  NUMBER_KEY_5                              0005E0  1504
  NUMBER_KEY_6                              0005FA  1530
  NZERO_JZ_MNEMONIC                         000765  1893
  ORG_CLICK_0                               000574  1396
  ORG_CLICK_7                               000608  1544
  RESET_DATA_REG                            000630  1584
  RET_MNEMONIC                              00071A  1818
  ROW1                                      000519  1305
  ROW2                                      000523  1315
  ROW3                                      00052F  1327
  ROW4                                      00053B  1339
  RUN_CODE                                  0006BB  1723
  RUN_EXE                                   0006AE  1710
  SET_DATA_ON_SEGMENT                       000671  1649
  SHOW_ON_SEGMENT                           00067B  1659
  SHOW_R2_ON_SEGMENT                        000679  1657
  START                                     000687  1671
  UPDATE_ADDRESS_INPUT                      000639  1593
  UPDATE_DATA_INPUT                         000640  1600
  UPDATE_MEMORY                             0006B2  1714
  UPDATE_STATE_FLAGS                        000548  1352
  WAIT1                                     0007EF  2031
  WAIT2                                     0007E4  2020
  WRONG_KEY                                 00062B  1579
  WRONG_KEY_0                               00057C  1404
  WRONG_KEY_3                               0005B0  1456
  WRONG_KEY_4                               0005DA  1498
  WRONG_KEY_6                               0005FA  1530
  WRONG_KEY_7                               000628  1576
  WRONG_PRESS                               0006A0  1696
  ZERO_JZ_MNEMONIC                          000757  1879
